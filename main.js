const TelegramApi = require('node-telegram-bot-api')
const express = require('express')
const cors = require('cors')

require('dotenv').config()

const token = '6643030679:AAH7xkgdakwi3ARPbl_TBMAoYiifVzSzF88';
const bot = new TelegramApi(token, {polling: true});
const app = express()

app.use(express.json())
app.use(cors())

let chatIdGlobal = 0;
let globalUserName = ''
bot.on('message', async (msg) => {
    try{
        if (msg.text === '/start') {
            const chatId = msg.chat.id;
            chatIdGlobal = chatId;
            const text = msg.text;
            if (msg.chat?.id !== -4275066986) {
                await bot.sendPhoto(chatId, 'image_bot.jpg', {
                    caption: '–ü—Ä–∏–≤–µ—Ç, –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ —Ä–∞–±–æ—Ç—ã.',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µüìñ', url: 'https://telegra.ph/Korotko-o-rabote-v-CENTRAL-TEAM-06-22'},
                                {text: '–°–æ–≥–ª–∞—Å–µ–Ω —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π‚úÖ', callback_data: 'approve'}
                            ]
                        ],
                    },
                });
            }
        }
    } catch (e){
        console.log(e)
    }

});

bot.on('callback_query', async query => {
    try{
        msgId = query.message?.chat?.id;
        if(query.data === 'approve'){
            await bot.sendMessage(msgId, '–û–∫–µ–π, –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º —Ñ–æ—Ä–º—É', {
                reply_markup: {
                    keyboard: [[{text: '–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É', web_app: {url: 'https://glittering-tulumba-d1e9aa.netlify.app/form'}}]],
                    remove_keyboard: true
                }
            });
        }

        if(query.data === 'submit'){
            await bot.sendMessage(chatIdGlobal, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞, –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ.', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º', url: 'https://t.me/bruto_333'},
                            {text: '–û—Ç–±–æ—Ä –Ω–æ–≤–∏—á–∫–æ–≤', url: 'https://t.me/+RYknmVbix4VhZTRi'}
                        ]
                    ]
                }
            })

            await bot.editMessageText(`–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${globalUserName} –ø—Ä–∏–Ω—è—Ç–∞ \n\n–ó–∞—è–≤–∫–∞:\n<blockquote>${query.message.text}</blockquote>\n\n–ó–∞—è–≤–∫—É –ø—Ä–∏–Ω—è–ª: @${query.from.username}`, {
                parse_mode: 'HTML',
                chat_id: query.message.chat.id,
                message_id: query.message.message_id
            })
        }

        if(query.data === 'decline'){
            await bot.editMessageText(`–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${globalUserName} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ \n\n–ó–∞—è–≤–∫–∞:\n<blockquote>${query.message.text}</blockquote>\n\n–ó–∞—è–≤–∫—É –æ—Ç–∫–ª–æ–Ω–∏–ª: @${query.from.username}`, {
                parse_mode: 'HTML',
                chat_id: query.message.chat.id,
                message_id: query.message.message_id
            })
        }
    } catch (e) {
        console.log(e)
    }
});

bot.on('web_app_data', async query => {
    try{
        bot.sendMessage(query.chat.id, '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏–Ω—è—Ç–∏—è –≤ –∫–æ–º–∞–Ω–¥—É')
        const webAppData = JSON.parse(query.web_app_data.data);
        const first = webAppData.country;
        const second = webAppData.street;
        globalUserName = query.chat?.username
        bot.sendMessage(-1002167652118, `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${query.chat?.username}\n\n<blockquote>–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª –æ –ø—Ä–æ–µ–∫—Ç–µ?</blockquote>\n${first}\n\n<blockquote>–ï—Å—Ç—å –ª–∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ?</blockquote>\n${second}\n`,{
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {text: '–ü—Ä–∏–Ω—è—Ç—å', callback_data: 'submit'},
                        {text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: 'decline'}
                    ]
                ],
            }
        });
    } catch (e) {
        console.log(e)
    }

})

const PORT = 5000

app.listen(PORT, () => console.log(`Listening on ${PORT}`))